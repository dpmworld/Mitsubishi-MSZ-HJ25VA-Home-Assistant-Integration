substitutions:
  name: mitsubishi-ac-<macaddress>
  friendly_name: Mitsubishi MSZ-HJ25 (<macaddress>)
  id_name: hvac_<macaddress>
  time_timezone: "Europe/Rome"


esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  name_add_mac_suffix: False

esp32:
  board: esp32-s3-devkitc-1
  framework:
    #type: esp-idf
    type: arduino
    

# Enable logging
logger:
  level: INFO

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_key

ota:
  - platform: esphome

time:
  - platform: homeassistant

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Msz-Hj25 Fallback Hotspot"
    password: !secret esp_password

captive_portal:

web_server:
  version: 3
  include_internal: True
  auth: 
    username: !secret esp_username
    password: !secret esp_password

uart:
  id: HP_UART
  baud_rate: 2400
  tx_pin: GPIO1
  rx_pin: GPIO2

# External component reference
external_components:
  - source: github://echavet/MitsubishiCN105ESPHome

# Climate entity configuration
climate:
  - platform: cn105
    id: hp
    name: ${friendly_name}
    icon: mdi:heat-pump
    supports:
      mode: [COOL, HEAT, FAN_ONLY, DRY]
      fan_mode: [AUTO, QUIET, LOW, MEDIUM, HIGH]
      swing_mode: ["OFF", VERTICAL]
    visual:
      min_temperature: 16
      max_temperature: 31
      temperature_step:
        target_temperature: 1
        current_temperature: 0.1
    compressor_frequency_sensor:
      name: ${name} Compressor Frequency
    vertical_vane_select:
      name: ${name} Vertical Vane
    #horizontal_vane_select:
    #  name: ${name} Horizontal Vane
    isee_sensor:
      name: ${name} ISEE Sensor
    remote_temperature_timeout: 30min
    debounce_delay : 500ms
    update_interval: 4s

text_sensor:
  - platform: version
    name: "ESPHome version"
    hide_timestamp: True
    disabled_by_default: True
  - platform: wifi_info
    ssid: 
      name: "Connected SSID"
      id: ${id_name}_connected_ssid
      entity_category: "Diagnostic"
      disabled_by_default: True
    ip_address:
      name: "IP Address"
      id: ${id_name}_ip_addr
      entity_category: "Diagnostic"
      disabled_by_default: True
    bssid:
      name: "Connected BSSID"
      id: ${id_name}_BSSID
      entity_category: "Diagnostic"
      disabled_by_default: True
    mac_address:
      name: "Mac Wifi Address"
      id: ${id_name}_mac_addr
      entity_category: "Diagnostic"
      disabled_by_default: True

sensor:
  - platform: wifi_signal # Reports the WiFi signal strength/RSSI in dB
    name: "WiFi Signal dB"
    id: ${id_name}_wifi_signal_db
    update_interval: 60s
    entity_category: "Diagnostic"
    disabled_by_default: True

  - platform: copy # Reports the WiFi signal strength in %
    source_id: ${id_name}_wifi_signal_db
    name: "WiFi Signal Percent"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "%"
    entity_category: "Diagnostic"
    device_class: ""
    disabled_by_default: True

light:
  - platform: esp32_rmt_led_strip
    name: Led
    id: led
    internal: true
    rgb_order: GRB
    pin: 35
    num_leds: 4
    rmt_channel: 1
    chipset: ws2812
    restore_mode: ALWAYS_OFF

switch:
  - platform: restart
    name: "Restart"
    id: device_restart
    disabled_by_default: True
    entity_category: "Diagnostic"

  - platform: template
    id: eps32_s3_led_switch
    name: Led switch #${led_switch}
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF 
    lambda: return id(eps32_s3_led_switch).state;
    turn_on_action:
      - light.turn_on:
          id: led
          brightness: !lambda |-
            // output value must be in range 0 - 1.0
            return id(led_brightness).state / 100.0;
    turn_off_action:
      - light.turn_off:
          id: led


number:
    ## Set led brightness
  - platform: template
    id: led_brightness
    name: Led brightness #${led_brightness}
    icon: mdi:toggle-switch-variant
    mode: slider
    entity_category: config
    optimistic: true
    min_value: 0
    max_value: 100
    step: 10
    initial_value: 70
    restore_value: no
    unit_of_measurement: "%"
    on_value:
      then:
        - if:
            condition:
              light.is_on: led
            then:
              light.turn_on:
                id: led
                brightness: !lambda |-
                  // output value must be in range 0 - 1.0
                  return id(led_brightness).state / 100.0;
